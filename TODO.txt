== TODO Nov 2013

* sort out quning grids (ferret and james')

* set legacyStimLevelOffset in grids

* check James's light stuff works with new compensation code

* update Astrid's stuff for new compensation

* check calibration in benware, by:
  ** recording the sound produced
  ** testing the code that produces each grid somehow
  ** getting actual spectrum of produced sounds

  
-- TODO


* raster slowness with 64 channels (may not be fixable) 
-- investigate on VB

* too many small files when sweeps are short


== TODO MARCH 16 2013

* test stereoplay version 6

* TDT devices are reinitialising when they shouldn't be

* fetch RX5-nogain.rcx from wedge room computer

* MOTU stim device

* feed stimulus back into recording to verify it



== probably unfixable

* Numerous WriteTag errors on WaveformL. Why do we get this error? esp quning



== TODO... later 

* Make it possible to HEAR unfiltered waveforms (don't switch between filtered
  and unfiltered when the user changes the display, probably)

* Pause/hang when reconnecting with activeX objects after ctrl-c. Why?

* Document code

* post-init pause may no longer be necessary



== ON HOLD

* multiplex grids (slow if stimuli are very different lengths)

* default plot modes for different grids

* progress bar

* RX6 playing old stimuli?!

* VAS?

* stereoPlay16bit -- is it OK to lose resolution? we don't really know

* Compensate stimuli on TDT (saves 50% stimulus upload time).
  Can be done through matlab, no RPVDS req'd
  -- it's too slow! RX6 can cope at 50k but not 100k. See calibplay.rcx

* Make a noise at the start of every sweep so user can monitor what is going
  on? Or make sure something is moving on screen all the time, even if graphs
  are off?


== DONE

* better handling of compensation filter selection (so you don’t have to 
specify in in every grid) 
-- done

* make sure compensation filters are a reasonable length -- speed of convolution

** we don't need to integrate calibration with bw, just allow it to be tested within bw
SO: relative calibration is mostly fine, though it might be a good idea to use newer code, and it's
definitely necessary to alter save format

absolute calibration program:
* allow recording of bonger (94dB?), measure RMS_B
* play 1kHz tone @ RMS=1Pa (94dB), measure RMS_T
* get compensation factor RMS_B/RMS_T
* play 1kHz tone again, confirm that compensation factor means it's now same level

you could have a special mode of benware, set by CALIBRATE=true; benware
extra/alternative grids available for calibration tests
in this mode, expt.dataDevice is overridden with a device that records an analogue input on RZ2
(i.e. the mic input)
at the end of each sweep, you get an extra window with waveform, spectrogram, PSD.

for absolute_calibration, the grid first allows user to record bonger

the stimulus values could be measured in Pa. then:
* the absolute threshold of hearing (0dB SPL; 2e-5Pa) would be RMS=2e-5
* 80dB would be RMS=0.2Pa
* 94dB would be RMS=1Pa
* clip at +/-10 (114dB)?

-- we then need a way to adjust levels on a grid-by-grid basis


* more sensible absolute calibration (RMS of x Volts means level of y dB) 

* james's calibration needs to produce a file called compensationFilters.200k.mat,
  containing a variable called compensationFilter
-- done

* my calibration needs to produce files names 50k and 100k
-- done

* should we use my rewritten calibration code?

* compensation filters -- we need a single overall level adjustment for the compensated
  stimuli, which makes RMS=0.1 into 80dB. This should be specified in expt
  
* don't use the B&K display -- we want to be able to use the GRAS amplifier too

* I think we need to remove some of the current level manipulation code, probably from
  multiple different stimulus generation functions.

>> * scalable LFP (so that it’s still visible when there is a dud channel) 
-- done
>> * time tick-marks are missing in PSTHs
-- done
>> * PSTHs clipped at the top 
-- hopefully done
>> * sometimes the time axis is meaningless (1 1 1 1) 
-- done

* need to be able to address NUMBERED devices on zBUs

* need to have different versions of stereoPlay per device (like datadevice)
    * should be done, needs testing

* stimDevice channel numbers could be integrated into rcx file now that 
  there's one rcx per device

* Also consider plotData and state structures -- should they be combined?
  -- both global?
  -- both local?

* block randomise stimuli

* Sort out business where verifyExpt/Grid/etc assume loadStereo is being used 

* Clean up parameters of runSweep

* Plot averaged LFP? (different filtering required, may not be easy to do it
  fast enough)

* Sample grid file showing parameters (e.g. maxSweepLength, sweepLength,
  nRepeats==Inf, ...)

* Show gain factor in main plot, plus other plot labels

* Gain factors will be lost when quitting matlab (make it part of expt or
  state structures?)

* allow user to choose visual alert instead of bugle and turn both off

* Fake hardware mode for testing

* compensate stimuli online? no. too slow (6 sec / channel for a 30sec stim)

* Have a way of continuing an interrupted grid (an option instead of choosing
  from grids/) 

* Save expt structure somewhere

* UI for modifying expt structure

* Not really happy with tdt structure -- should it be global after all?
  -- don't think so but current situtation is not ideal either
  -- Lose access to tdt structure when ctrl-C is pressed :-(
  -- could be part of state, which has (I think) to be global

* init TDT devices in a function, remove post-init pause if nothing done(?)

* Ability to pause

* Save data during sweep, not afterwards

* Check that SAVED data exactly matches TDT buffer when checkData is true

* Grids for sparseness/highlights

* UI for choosing grid

* Why is having data as a {} faster than a []? This suggests that something
  can be fixed, and then it will be faster than both.

* Fixed ylim on scope trace

* Scope trace using linspace for a fixed number of points

* Show spikes in scope if there are not too many

* Save spike data for each sweep in a separate file (saving is too slow when
  there are lots of spikes)

* Work out how many samples we should actually expect from TDT, and set data buffer
  to the appropriate size. At the moment, we're messing with +/- because the TDT's
  algorithm isn't quite obvious. It can't be that hard either (ceil,floor or
  round)
  -- thinking about it:
  * We know that you get the expected number when the sweep is a round number
  of seconds
  * We know that you get expected number - 1 otherwise.
  -- I'm pretty sure this adds up to simply floor() rather than ceil()

* On error, close all files and diary

* More careful checks of device status in stim/dataDeviceInit and ZBusInit,
  e.g. check RCX circuit using a fake tag, and any circuit status stuff necessary. Be paranoid!

* Get rid of nSamples from the saving code, and just save the 
  whole lot (which will no longer have a trailing zero)

* Store fs_in and fs_out in one of the data structures

* Include data filenames in sweepInfo.mat (this happens naturally if runSweep
  is informed about which files to use by benWare.m), which itself happens
  naturally in runSweep has to save data during the sweep

* Neil's TDT error in log from expt 30

* Make sure stimulus device knows how long the stimulus is and doesn't play junk samples at the end --
  or truncate long stimuli come to that (i.e. when stimulus length changes within grid)

* Is stereoplay actually behaving correctly re the above?

* Saving sweeps structure as separate files (is saving it slow?)

* Set which channel is selected on audio monitor of RZ5

* make it easy to switch plotting off

* check that new data files are OK (sweeps in individual files)

* Set which channel is selected on audio monitor of RZ5

* stimDevice stimulus length is getting set to length of CURRENT stim, not next stim
  -- fixed

* ontehfly: List directories in date order and default to most recent

* UI for seeing incoming data - F for filtered, R for raw, etc.

* == Resetting devices...Warning: The following error was caught while executing 'onCleanup' class destructor:
Attempt to reference field of non-structure array. 
> In benWare at 96
??? Operation terminated by user during ==> downloadData at 10

In ==> runSweep at 106
    newdata = downloadData(tdt.dataDevice, chan, nSamplesReceived(chan));

* onCleanup (for closing files when ctrl-c is used) isn't working all the time
  -- when does it, why doesn't it??

* Ability to plot filtered data on scope trace

* I had to turn write caching off because of crashes. Why is this? It's slow
  now!

* Plot actual rasters (not just a single sweep)

* Plot PSTHes

* get rid of drawnow when not drawing

* Faster for short stimuli -- HOW? (and are we slower than brainware still?)
  -- numerous small optimisations are possible (and worthwhile) but turning plotting off
     make a big difference (quning from 0.6+ to 0.3+ sec per sweep). Need to investigate 
     saving of the mat file, which does take longer and longer through a grid.

* Allow other channel counts than 32 (use length(expt.channelMapping))

* Search mode -- a particular grid can specify that we won't save waveform
  data (e.g. bilateral noise)

* Better fakeHardware that (a) passes checkdata test and (b) has spike rates
  that depend on stimulus (will need to inform dataDevice about stimDevice so
  it can measure running SD (or mean(abs())) of stimulus and modulate spike
  rate accordingly

* PSTH of active channel should be highlighted

* Crash due to PSTH issue when the signal is all zeros

* More psth-like PSTHes

* Display looks very crappy on Mac. Why / does it matter?

