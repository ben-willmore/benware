== Benware

Benware is a simple matlab-based neurophysiology program.


= Getting started

Download Benware from http://github.com/beniamino38/benware

For physiology, download calibration code from http://github.com/beniamino38/newcalib
For spike sorting, jump to "Spike sorting", below


= Benware initial setup

In Matlab:
 cd benware
 setuser(<yourname>)
 loadexpt
 expt

The 'expt' variable contains essential parameters that you'll need to adjust to match your hardware setup:

expt.userName -- should be the same as you specified with setuser)
expt.stimulusDirectory -- a dir that will be scanned for stimuli
expt.nStimChannels -- number of output audio/voltage channels
expt.stimDeviceInfo -- adjust to match your TDT stimulus device
expt.dataDeviceInfo -- adjust to match your TDT recording device
expt.dataRoot -- where you want data to be saved

Once you've adjusted these parameters, save using 'saveexpt'


= Stimuli

Stimuli can be provided in many different ways. The simplest is to add a directory inside the directory pointed to by expt.stimulusDirectory containing wav files:

1. Make wav files containing your stimuli. Take note of the following important constraints: 

A: Your wav files must have a TDT supported sample rate (eg. 48828 or 97656 Hz). 
B: All wav files in a given directory must have the same sample rate. 
C: The values in your wav files will be interpreted as pressures in Pascals. This means that, if you make a 1kHz tone in Matlab, with an RMS of 1, it will be played at 1 Pascal RMS, I.E. 94dB. 
D: You should be careful about the calibrated range of the equipment. Currently, this means that at 48828Hz, your stimuli should contain only frequencies between 200 and 22kHz, and at 97656Hz, your stimuli should contain only frequencies between 200 and 32kHz. If your stimulus contains frequencies outside this range, they will be attenuated by the equipment, and so the overall level of your sounds will be lower than you expect. 
E: The maximum length of your wav files should be 40 seconds. 
F: If you want the same stimulus in both ears, use mono wav files. If you want different stimuli in the two ears, use stereo wav files. 

2. Put your wav files in a directory. The name of this directory is what benware will call your stimulus 

3. Optionally, add a file ‘parameters.txt’ inside your directory. This can contain many different parameters, but the only one you are likely to need is the number of times your stimulus should be repeated. To set this, put the following line in your parameters.txt file: 
reps = 10 
(If you leave this out, your stimulus will be repeated 20 times).


= Calibration

-- see newcalib/README

Once you have some compensation filters, let's say they're in a directory called 'E:\newcalib\2014.01.01.headphones'. Then, in Matlab:
 cd benware
 newcompensationfilters('E:\newcalib\2014.01.01.headphones')


= Experiment and probe setup

Every time you start a new experiment:
 cd benware
 newexpt

By default, 1 will be added to the experiment number. This number will be used to make a directory to save data into. You can alternatively provide an experiment number, e.g. ewexpt(10).

Every time you start a new penetration:
 cd newprobe

Fill in your probe details; the IDs are optional. This will be used to correctly set the electrode channel mapping so that the Benware display matches the physical arrangement of the probes.


= To run an experiment:

 cd benware
 benware

Choose from the list of stimuli. Press k in the Benware window to see a list of keys that you can press to produce different kinds of display (waveforms, rasters, PSTH, LFP).


= Spike sorting

-- Installation

Can be done on Linux, Mac or Windows

1. Download Benware from http://github.com/beniamino38/benware

2. Install a compiler
Mac: Download XCode from app store and install command line tools
Linux: sudo apt-get install build-essential

2. Install python
On a Linux machine: Install anaconda
On a Mac: Install Enthought Canopy
On a PC: Install pythonxy (MinGW package needed)

3. Install generic python packages using anaconda/canopy/pythonxy:
You need: pytables, pyqt or pyside, pyopengl, h5py
[conda install pytables h5py; pip install pyopengl; pip install pyside]

4. Downgrade python package "pandas" (Mac, Linux):
In Terminal:
 sudo pip install -Iv pandas==0.12.0

5. PC only: Make sure that distutils uses MinGW (howto see for example https://github.com/cython/cython/wiki/InstallingOnWindows)
Create a file named distutils.cfg (if you already don't have it) in your PythonXYLibdistutils and add to it the following lines:
 [build]
 compiler = mingw32

6. Download various parts of klusta suite:

You need each of:
 https://github.com/beniamino38/spikedetekt
 https://github.com/beniamino38/kwiklib
 https://github.com/rossant/qtools
 https://github.com/rossant/galry
 https://github.com/beniamino38/kwiklib
 https://github.com/beniamino38/klustaviewa 

For each of these, download (using 'git clone' or .zip link on the page). Then, in Terminal: 
 cd spikedetekt
 sudo python setup.py install

Now repeat for the other parts (kwiklib, ...)

Klustaviewa only: if you get an error mentioning cython, try:
 cd klustaviewa/stats/
 cython correlograms_cython.pyx
 cd ../..
 python setup.py install


-- Clustering

If your data from expt 64 was saved in /data/expt64, in Matlab:
 cd benware
 clusterspikes('/data/expt64');


-- Manual editing of clusters

Now, in terminal, run klustaviewa on all shanks, e.g.:
 cd /data/expt64/P10-decorr.v2/shank.1
 klustaviewa decorr.clu.1
 cd /data/expt64/P11-decorr.v2/shank.2
 klustaviewa decorr.clu.2
 ...


Now, get the spike times into Matlab:
 cd benware
 % for auto-clustered spikes (before you run klustaviewa)
 spiketimes = getclusteredspikes('/data/expt64')
 % for manually sorted spikes (the result of running klustaviewa)
 spiketimes = getsortedspikes('/data/expt64')
